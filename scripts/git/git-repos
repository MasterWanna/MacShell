#!/usr/bin/python3

import sqlite3

from utils import *


def show_git_repo(path: str) -> None:
    print(path.ljust(max_length - get_real_string_len(path) + len(path)) + " : ", end="", flush=True)
    run_command("git -C {} remote -v | grep fetch | awk '{{print $2}}'".format(path))


if __name__ == "__main__":
    parser = ArgumentParser(description="Show Git Repos")

    parser.parse_args()

    git_repo_paths = []
    git_repo_remove = []

    conn = sqlite3.connect(db_path)
    conn.execute("create table if not exists '{}' (path text unique)".format(
        git_repo_table_name))
    conn.commit()

    git_repo_paths = classify_repos(conn)

    conn.close()

    if not git_repo_paths:
        print("No git repo found.")
        exit(1)

    max_length = max(get_real_string_len(path) for path in git_repo_paths)

    exec_all(show_git_repo, git_repo_paths, parallel=False)
