#!/usr/bin/python3

import random
from types import FunctionType
from re import Pattern

from utils import *


def int_to_pigs(val: int, length: int) -> str:
    subs = format_int_base(val, base, length)
    for i, pig in enumerate(pigs):
        subs = subs.replace(str(i), pig)
    return subs


def parse_file(file: str) -> None:
    item = read_file(file)

    if not item:
        print("File '{}' is empty".format(file))
        return

    encode = []
    pig_length = set()

    while True:
        for macro in macros:
            match = macro[0].match(item)
            if match:
                string = match.group()
                pig_length.add(macro[1](encode, match))
                item = item[len(string):]
                break
        else:
            break
    
    code = []
    
    while item:
        for codeblock in codeblocks:
            match = codeblock[0].match(item)
            if match:
                string = match.group()
                if string[0] == '#':
                    print("Statement of macro in PIGS destroys the aestetics of the code.")
                    exit(1)
                
                codeblock[1](code, match)
                item = item[len(string):]
                break

    mapping = {}

    keys = list(dict.fromkeys([c for c in code]))
    random.shuffle(keys)
    leng = get_transformation_len(len(keys), base)

    if leng in pig_length:
        print("PIG pattern length is already used in user-defined macros.")
        exit(1)

    for i, key in enumerate(keys):
        val = int_to_pigs(i, leng)
        mapping[key] = val
        encode.append("#define {} {}".format(val, key))

    for c in code:
        if c[0] == '#':
            encode.append(c)
        else:
            encode.append(mapping[c])

    write_file(extend_filename(file, ".pig"), encode)


if __name__ == '__main__':
    parser = ArgumentParser(description='Generate PIG/PIG++ Code')

    parser.add_argument("-p", "--pigs", type=str, default=None, help="PIG patterns")
    parser.add_argument('files', type=str, nargs="+", help="c/c++ code")

    args = parser.parse_args()

    pigs: str = args.pigs
    files: List[str] = args.files

    if pigs is None:
        pack = "üêóüêñ"
        pigs = ["üêó", "üêñ"]
    elif len(pigs) < 2:
        print("PIG patterns must be at least 2 characters long.")
        exit(1)
    else:
        pack = pigs
        pigs = [pig for pig in pigs]

    base = len(pigs)

    macros: List[Tuple[Pattern, FunctionType]] = [
        (re.compile('\\s+', re.MULTILINE), lambda x, y: None), # whitespace
        (re.compile("#define\\s+([{}]+)\\s+[^\n]+".format(pack)), lambda x, y: x.append(y.group()) or len(y.groups()[0])), # exception
        (re.compile("#[^\n]+"), lambda x, y: x.append(y.group())), # macros
        (re.compile('//[^\n]*'), lambda x, y: None), # comment
        (re.compile('/\\*.*\\*/', re.MULTILINE), lambda x, y: None), # comment
    ]

    codeblocks: List[Tuple[Pattern, FunctionType]] = [
        (re.compile('\\s+', re.MULTILINE), lambda x, y: None), # whitespace
        (re.compile('//[^\n]*'), lambda x, y: None), # comment
        (re.compile('/\\*.*\\*/', re.MULTILINE), lambda x, y: None), # comment
        (re.compile('[a-zA-Z_][0-9a-zA-Z_]*'), lambda x, y: x.append(y.group())), # identifier
        (re.compile('[0-9]+\\.[0-9]*[a-z]*', re.IGNORECASE), lambda x, y: x.append(y.group())), # float number
        (re.compile('[0-9]*\\.[0-9]+[a-z]*', re.IGNORECASE), lambda x, y: x.append(y.group())), # float number
        (re.compile('(0(b|x)?)?[0-9a-fA-F]+[a-z]*', re.IGNORECASE), lambda x, y: x.append(y.group())), # int number
        (re.compile('"(\\\\"|[^"])*"'), lambda x, y: x.append(y.group())), # string
        (re.compile('\'.\''), lambda x, y: x.append(y.group())), # char
        (re.compile(';'), lambda x, y: x.append(y.group())), # semicolon
        (re.compile('\\*'), lambda x, y: x.append(y.group())), # asterisk
        (re.compile('\\&'), lambda x, y: x.append(y.group())), # ampersand
        (re.compile('\\('), lambda x, y: x.append(y.group())), # left parenthesis
        (re.compile('\\)'), lambda x, y: x.append(y.group())), # right parenthesis
        (re.compile('\\['), lambda x, y: x.append(y.group())), # left bracket
        (re.compile('\\]'), lambda x, y: x.append(y.group())), # right bracket
        (re.compile('\\{'), lambda x, y: x.append(y.group())), # left brace
        (re.compile('\\}'), lambda x, y: x.append(y.group())), # right brace
        (re.compile('[^0-9a-zA-Z_\\s";\\(\\)\\[\\]\\{\\}*&]+'), lambda x, y: x.append(y.group())), # other
    ]

    for file in files:
        parse_file(file)
    