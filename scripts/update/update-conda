#!/usr/bin/python3

from argparse import ArgumentParser
import json

from utils import *


def update(name: str, path: str):
    print(get_split_block(text="conda pkgs for {}".format(name)))
    run_command_s("conda update -n {} --all -y".format(name))
    print(get_split_block(text="Done!"))
    if os.path.isfile("{}/upgrade-pip".format(path)):
        print(get_split_block(text="pip pkgs for {}".format(name)))
        run_command_s("{}/bin/python -m pip install $(cat {}/upgrade-pip)".format(path, path))
        run_command_s("{}/bin/python -m pip cache remove '*'".format(path))
        print(get_split_block(text="Done!"))


if __name__ == "__main__":
    parser = ArgumentParser(description="Update Conda Repo")

    parser.add_argument("names", type=str, default=[], nargs="*", help="repo names")

    args = parser.parse_args()

    names: List[str] = args.names

    code, res = read_command("conda env list --json")

    if code:
        print("Conda run failed!")
        exit(1)

    envs = json.loads(res)["envs"]

    envs = {get_filename(env) if "envs" in env else "base": env for env in envs}

    if names:
        updateenv = [env for name in names for env in envs if re.fullmatch(name, env)]

    else:
        updateenv = ["base"]

        pybase = [env for env in envs if re.fullmatch("py[0-9XJQK]+", env)]

        if len(pybase) > 0:
            pybase = pybase[0]
            updateenv.append(pybase)

        devbase = [env for env in envs if re.fullmatch("dev-.+", env)]

        if len(pybase) > 0:
            updateenv.extend(sorted(devbase))

    for name in updateenv:
        update(name, envs[name])

    print(get_split_block(text="conda clean"))
    run_command_s("conda clean -a -y")
    print(get_split_block(text="Done!"))
