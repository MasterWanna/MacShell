#!/usr/bin/python3

import json

from utils import *


def update(name: str):
    path = envs[name]
    exec_command("conda update -n {} --all -y".format(name), "conda pkgs for {}".format(name))
    if os.path.isfile("{}/upgrade-pip".format(path)):
        exec_command("{}/bin/python -m pip install -U $(cat {}/upgrade-pip)".format(path, path), "pip pkgs for {}".format(name), end=False)
        exec_command("{}/bin/python -m pip cache remove '*'".format(path), "clean pip cache for {}".format(name))


if __name__ == "__main__":
    parser = ArgumentParser(description="Update Conda Repo")

    parser.add_argument("names", type=str, default=[], nargs="*", help="repo names")

    args = parser.parse_args()

    names: List[str] = args.names

    code, res = read_command("conda env list --json")

    if code:
        print("Conda run failed!")
        exit(1)

    envs = json.loads(res)["envs"]

    envs = {get_filename(env) if "envs" in env else "base": env for env in envs}

    if names:
        updateenv = [env for name in names for env in envs if re.fullmatch(name, env, re.IGNORECASE)]

    else:
        updateenv = ["base"]

        pybase = [env for env in envs if re.fullmatch("py[0-9XJQK]+", env)]

        if len(pybase) > 0:
            updateenv.extend(pybase)

        devbase = [env for env in envs if re.fullmatch("dev-.+", env)]

        if len(pybase) > 0:
            updateenv.extend(sorted(devbase))

    exec_all(update, updateenv, parallel=False)

    exec_command("conda clean -a -y", "clean conda cache")
