#!/usr/bin/python3

from argparse import ArgumentParser
import configparser
import glob
import os
import re
import shutil
import sys
import termios
import tty


def getchar() -> str:
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


def changeexec(path: str):
    os.chmod(path, os.stat(path).st_mode & 0o777 | 0o111)


if __name__ == '__main__':
    parser = ArgumentParser(description="Install Shell Script")
    
    parser.add_argument('-y', '--yes', action='store_true', help='uninstall shell script if already installed without confirmation')

    args = parser.parse_args()

    if os.getuid() != 0:
        print('This script must be run as root.')
        exit(1)

    os.chdir(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

    installed_files = "./setup/.install"

    if os.path.isdir(installed_files):
        print("Error : {} is a directory.".format(installed_files))
        exit(1)
    elif os.path.isfile(installed_files):
        if not args.yes:
            print("Script is already installed. Uninstall them first.")
            print("Do you want to continue? Y/[N]: ", end="", flush=True)
            option = getchar()
            print()
            if option.upper() != "Y":
                print()
                print("Aborted.")
                exit(1)

        os.system("./setup/uninstall")

    print("Installing...")

    if os.path.isdir("./scripts/utils/__pycache__"):
        shutil.rmtree("./scripts/utils/__pycache__")

    if os.path.isdir("./bin"):
        shutil.rmtree("./bin")

    os.mkdir("./bin")

    for file in glob.glob("./scripts/*/*"):
        if os.path.isfile(file):
            shutil.copy(file, "./bin/{}".format(os.path.basename(file)))

    if os.path.isfile("./bin/__init__.py"):
        os.remove("./bin/__init__.py")

    if os.path.isfile("./setup/alias.cfg"):
        binaries = sorted(os.listdir("./bin"))

        config = configparser.ConfigParser()
        config.read("./setup/alias.cfg")
        alias = config['alias']

        for key in alias:
            value = alias[key]

            if '/' in key:
                for item in binaries:
                    if re.fullmatch(value, item):
                        os.remove("./bin/{}".format(item))

        binaries = sorted(os.listdir("./bin"))
        toalias = []

        for key in alias:
            value = alias[key]

            for item in binaries:
                if re.fullmatch(value, item):
                    toalias.append((key.format(item), item))

        for key, value in toalias:
            if os.path.isfile("./bin/{}".format(value)) and not os.path.isfile("./bin/{}".format(key)):
                shutil.copy("./bin/{}".format(value), "./bin/{}".format(key))
            else:
                print("Error: ./bin/{} does not exist or ./bin/{} already exist.".format(value, key))
                exit(1)

    for shell in os.listdir("./bin"):
        if os.path.exists("/usr/local/bin/{}".format(shell)):
            print("Error: /usr/local/bin/{} already exist.".format(shell))
            exit(1)

    with open("./setup/.install", "w") as install:
        for shell in sorted(os.listdir("./bin")):
            install.write("{}{}".format(shell, os.linesep))

            changeexec("./bin/{}".format(shell))
            shutil.copy("./bin/{}".format(shell),
                        "/usr/local/bin/{}".format(shell))

    shutil.rmtree("./bin")
    print("Install into /usr/local/bin successfully.")
    print("Installed items : {}".format(installed_files))
